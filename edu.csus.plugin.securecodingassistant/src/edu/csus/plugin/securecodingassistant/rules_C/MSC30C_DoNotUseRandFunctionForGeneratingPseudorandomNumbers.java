package edu.csus.plugin.securecodingassistant.rules_C;

import org.eclipse.cdt.core.dom.ast.IASTFunctionCallExpression;
import org.eclipse.cdt.core.dom.ast.IASTNode;
import org.eclipse.cdt.core.model.ITranslationUnit;
import edu.csus.plugin.securecodingassistant.Globals;

/**
 * <b><i>The text and/or code below is from the CERT website:
 * <a target="_blank"href="https://wiki.sei.cmu.edu/confluence/display/seccode">
 * https://wiki.sei.cmu.edu/confluence/display/seccode </a></i></b>
 * <p>
 * C Secure Coding Rule: MSC30-C. DO not use the rand() function for generating
 * pseudorandom numbers
 * </p>
 * <p>
 * Pseudorandom number generators use mathematical algorithms to produce a 
 * sequence of numbers with good statistical properties, but the numbers 
 * produced are not genuinely random.
 * </p>
 * 
 * <p>
 * The C Standard rand() function makes no guarantees as to the quality of 
 * the random sequence produced. The numbers generated by some 
 * implementations of rand() have a comparatively short cycle and the 
 * numbers can be predictable. Applications that have strong pseudorandom 
 * number requirements must use a generator that is known to be sufficient 
 * for their needs.
 * </p>
 * 
 * @author Victor Melnik (Plugin Logic), CERT (Rule Definition)
 * @see C Secure Coding Rule define by CERT: <a target="_blank" 
 * href="https://wiki.sei.cmu.edu/confluence/display/c/MSC30-C.+Do+not+use+
 * the+rand%28%29+function+for+generating+pseudorandom+numbers">MSC30-C</a>
 *
 */

public class MSC30C_DoNotUseRandFunctionForGeneratingPseudorandomNumbers extends SecureCodingRule_C {

	private String rand = "rand()";
	private boolean ruleViolated;
	
	@Override
	public boolean violate_CDT(IASTNode node) {
		
		ruleViolated = false;
		if(node instanceof IASTFunctionCallExpression)
		{
			if(node.getRawSignature().contains(rand))
			{
				ruleViolated = true;
			}
		}
		return ruleViolated;
	}
	

	@Override
	public String getRuleText() {
		return "The C Standard rand() function makes no guarantees "
				+ "as to the quality of the random sequence produced. "
				+ "The numbers generated by some implementations of "
				+ "rand() have a comparatively short cycle and the "
				+ "numbers can be predictable.";
	}

	@Override
	public String getRuleName() {
		return Globals.RuleNames.MSC30_C;
	}

	@Override
	public String getRuleID() {
		return Globals.RuleID.MSC30_C;
	}

	@Override
	public String getRuleRecommendation() {
		
		return "Replace rand() function with the POSIX random() function";
	}

	@Override
	public int securityLevel() {
		// TODO Auto-generated method stub
		return Globals.Markers.SECURITY_LEVEL_MEDIUM;
	}

	@Override
	public ITranslationUnit getITranslationUnit() {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public String getRuleURL() {
		
		return "https://wiki.sei.cmu.edu/confluence/display/c/MSC30-C.+Do+not+use+the+rand%28%29+function+for+generating+pseudorandom+numbers";
	}

}
